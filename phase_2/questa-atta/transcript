# Compile of decode_stage.sv was successful.
# Compile of reg_file.v was successful.
# Compile of sign_extend.v was successful.
# Compile of sm.sv was successful.
# Compile of alu.sv was successful.
# Compile of branch_controller.sv was successful.
# Compile of execute_stage.sv was successful.
# Compile of forwarding_unit.sv was successful.
# Compile of fetch_stage.sv was successful.
# Compile of mem_fetch.sv was successful.
# Compile of memory_stage.sv was successful.
# Compile of memory_stage_without_buffers.sv was successful.
# Compile of write_back_stage.v was successful.
# Compile of hazard_controller.sv was successful.
# Compile of processor.sv was successful.
# Compile of var_reg.v was successful.
# Compile of var_reg_with_enable.v was successful.
# Compile of var_reg_with_mux.v was successful.
# Compile of var_reg_flags.v was successful.
# 19 compiles, 0 failed with no errors.
vsim work.processor -voptargs=+acc
# vsim work.processor -voptargs="+acc" 
# Start time: 16:32:23 on Jan 02,2023
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# Loading sv_std.std
# Loading work.processor(fast)
# Loading work.fetch_stage(fast)
# Loading work.var_reg_with_enable(fast)
# Loading work.var_reg_with_enable(fast__1)
# Loading work.mem_fetch(fast)
# Loading work.decode_stage(fast)
# Loading work.var_reg(fast)
# Loading work.var_reg(fast__1)
# Loading work.var_reg_with_mux(fast)
# Loading work.var_reg(fast__2)
# Loading work.var_reg_with_mux(fast__1)
# Loading work.var_reg_with_mux(fast__2)
# Loading work.var_reg_with_mux(fast__3)
# Loading work.var_reg_with_mux(fast__4)
# Loading work.sm(fast)
# Loading work.reg_file(fast)
# Loading work.execute_stage(fast)
# Loading work.forwarding_unit(fast)
# Loading work.branch_controller(fast)
# Loading work.var_reg_flags(fast)
# Loading work.var_reg(fast__3)
# Loading work.var_reg(fast__4)
# Loading work.var_reg(fast__5)
# Loading work.var_reg(fast__6)
# Loading work.var_reg(fast__7)
# Loading work.alu(fast)
# Loading work.memory_stage(fast)
# Loading work.memory_stage_without_buffers(fast)
# Loading work.write_back_stage(fast)
# Loading work.hazard_controller(fast)
add wave -position insertpoint  \
sim:/processor/ALU_ex \
sim:/processor/alu_op_dec \
sim:/processor/ALU_out_to_wb \
sim:/processor/alu_src_dec \
sim:/processor/alu_value_mem \
sim:/processor/branch_result \
sim:/processor/carry_sel_dec \
sim:/processor/clear_instruction_dec \
sim:/processor/clk \
sim:/processor/conditions_from_memory_pop \
sim:/processor/fetch_stall_from_cu \
sim:/processor/flag_reg_enable_dec \
sim:/processor/flag_reg_select_dec \
sim:/processor/flag_register_ex \
sim:/processor/flush_decode \
sim:/processor/flush_fetch \
sim:/processor/inport_sel_dec \
sim:/processor/inport_sel_ex \
sim:/processor/inport_sel_mem \
sim:/processor/input_port \
sim:/processor/input_port_ex \
sim:/processor/input_port_mem \
sim:/processor/instruction \
sim:/processor/interrupt_signal \
sim:/processor/jump_selector_dec \
sim:/processor/LDM_value_dec \
sim:/processor/ldm_value_dec \
sim:/processor/LDM_value_ex \
sim:/processor/LDM_value_fet \
sim:/processor/ldm_value_mem \
sim:/processor/mem_data \
sim:/processor/mem_pop_dec \
sim:/processor/mem_pop_ex \
sim:/processor/mem_push_dec \
sim:/processor/mem_push_ex \
sim:/processor/mem_read_dec \
sim:/processor/mem_read_ex \
sim:/processor/mem_write_dec \
sim:/processor/mem_write_ex \
sim:/processor/memory_address_select_dec \
sim:/processor/memory_address_select_ex \
sim:/processor/memory_write_src_select_dec \
sim:/processor/memory_write_src_select_ex \
sim:/processor/new_PC_ex \
sim:/processor/out_port \
sim:/processor/outport_enable_dec \
sim:/processor/outport_enable_ex \
sim:/processor/outport_enable_mem \
sim:/processor/pc_choose_interrupt_dec \
sim:/processor/pc_choose_interrupt_ex \
sim:/processor/pc_choose_interrupt_mem \
sim:/processor/pc_choose_memory_dec \
sim:/processor/pc_choose_memory_ex \
sim:/processor/pc_plus_1_or_pc_minus_1 \
sim:/processor/pc_plus_1_or_pc_minus_1_ex \
sim:/processor/pc_plus_one_dec \
sim:/processor/pc_plus_one_ex \
sim:/processor/pc_plus_one_fetch_s \
sim:/processor/pc_plus_one_r \
sim:/processor/pc_plus_one_s_dec \
sim:/processor/pc_write \
sim:/processor/pc_write_back_value \
sim:/processor/pc_write_from_cu \
sim:/processor/r_dst_dec \
sim:/processor/r_dst_ex \
sim:/processor/r_dst_fetch \
sim:/processor/r_dst_mem \
sim:/processor/r_scr_dec \
sim:/processor/r_scr_ex \
sim:/processor/r_scr_fetch \
sim:/processor/r_scr_mem \
sim:/processor/read_data1_ex \
sim:/processor/read_data2_ex \
sim:/processor/reg_data1_from_dec \
sim:/processor/reg_data1_mem \
sim:/processor/reg_data2_from_dec \
sim:/processor/reg_data2_mem \
sim:/processor/reg_write_address_dec \
sim:/processor/reg_write_address_ex \
sim:/processor/reg_write_address_mem \
sim:/processor/reg_write_dec \
sim:/processor/reg_write_ex \
sim:/processor/reg_write_mem \
sim:/processor/rst \
sim:/processor/shamt_dec \
sim:/processor/shamt_ex \
sim:/processor/shift_reg \
sim:/processor/stall_fetch \
sim:/processor/wb_sel_dec \
sim:/processor/wb_sel_ex \
sim:/processor/wb_sel_mem \
sim:/processor/write_address_to_mem \
sim:/processor/write_back_data
add wave -position end  sim:/processor/ALU_ex
add wave -position end  sim:/processor/alu_op_dec
add wave -position end  sim:/processor/ALU_out_to_wb
add wave -position end  sim:/processor/alu_src_dec
add wave -position end  sim:/processor/alu_value_mem
add wave -position end  sim:/processor/branch_result
add wave -position end  sim:/processor/carry_sel_dec
add wave -position end  sim:/processor/clear_instruction_dec
add wave -position end  sim:/processor/clk
add wave -position end  sim:/processor/conditions_from_memory_pop
add wave -position end  sim:/processor/fetch_stall_from_cu
add wave -position end  sim:/processor/flag_reg_enable_dec
add wave -position end  sim:/processor/flag_reg_select_dec
add wave -position end  sim:/processor/flag_register_ex
add wave -position end  sim:/processor/flush_decode
add wave -position end  sim:/processor/flush_fetch
add wave -position end  sim:/processor/inport_sel_dec
add wave -position end  sim:/processor/inport_sel_ex
add wave -position end  sim:/processor/inport_sel_mem
add wave -position end  sim:/processor/input_port
add wave -position end  sim:/processor/input_port_ex
add wave -position end  sim:/processor/input_port_mem
add wave -position end  sim:/processor/instruction
add wave -position end  sim:/processor/interrupt_signal
add wave -position end  sim:/processor/jump_selector_dec
add wave -position end  sim:/processor/LDM_value_dec
add wave -position end  sim:/processor/ldm_value_dec
add wave -position end  sim:/processor/LDM_value_ex
add wave -position end  sim:/processor/LDM_value_fet
add wave -position end  sim:/processor/ldm_value_mem
add wave -position end  sim:/processor/mem_data
add wave -position end  sim:/processor/mem_pop_dec
add wave -position end  sim:/processor/mem_pop_ex
add wave -position end  sim:/processor/mem_push_dec
add wave -position end  sim:/processor/mem_push_ex
add wave -position end  sim:/processor/mem_read_dec
add wave -position end  sim:/processor/mem_read_ex
add wave -position end  sim:/processor/mem_write_dec
add wave -position end  sim:/processor/mem_write_ex
add wave -position end  sim:/processor/memory_address_select_dec
add wave -position end  sim:/processor/memory_address_select_ex
add wave -position end  sim:/processor/memory_write_src_select_dec
add wave -position end  sim:/processor/memory_write_src_select_ex
add wave -position end  sim:/processor/new_PC_ex
add wave -position end  sim:/processor/out_port
add wave -position end  sim:/processor/outport_enable_dec
add wave -position end  sim:/processor/outport_enable_ex
add wave -position end  sim:/processor/outport_enable_mem
add wave -position end  sim:/processor/pc_choose_interrupt_dec
add wave -position end  sim:/processor/pc_choose_interrupt_ex
add wave -position end  sim:/processor/pc_choose_interrupt_mem
add wave -position end  sim:/processor/pc_choose_memory_dec
add wave -position end  sim:/processor/pc_choose_memory_ex
add wave -position end  sim:/processor/pc_plus_1_or_pc_minus_1
add wave -position end  sim:/processor/pc_plus_1_or_pc_minus_1_ex
add wave -position end  sim:/processor/pc_plus_one_dec
add wave -position end  sim:/processor/pc_plus_one_ex
add wave -position end  sim:/processor/pc_plus_one_fetch_s
add wave -position end  sim:/processor/pc_plus_one_r
add wave -position end  sim:/processor/pc_plus_one_s_dec
add wave -position end  sim:/processor/pc_write
add wave -position end  sim:/processor/pc_write_back_value
add wave -position end  sim:/processor/pc_write_from_cu
add wave -position end  sim:/processor/r_dst_dec
add wave -position end  sim:/processor/r_dst_ex
add wave -position end  sim:/processor/r_dst_fetch
add wave -position end  sim:/processor/r_dst_mem
add wave -position end  sim:/processor/r_scr_dec
add wave -position end  sim:/processor/r_scr_ex
add wave -position end  sim:/processor/r_scr_fetch
add wave -position end  sim:/processor/r_scr_mem
add wave -position end  sim:/processor/read_data1_ex
add wave -position end  sim:/processor/read_data2_ex
add wave -position end  sim:/processor/reg_data1_from_dec
add wave -position end  sim:/processor/reg_data1_mem
add wave -position end  sim:/processor/reg_data2_from_dec
add wave -position end  sim:/processor/reg_data2_mem
add wave -position end  sim:/processor/reg_write_address_dec
add wave -position end  sim:/processor/reg_write_address_ex
add wave -position end  sim:/processor/reg_write_address_mem
add wave -position end  sim:/processor/reg_write_dec
add wave -position end  sim:/processor/reg_write_ex
add wave -position end  sim:/processor/reg_write_mem
add wave -position end  sim:/processor/rst
add wave -position end  sim:/processor/shamt_dec
add wave -position end  sim:/processor/shamt_ex
add wave -position end  sim:/processor/shift_reg
add wave -position end  sim:/processor/stall_fetch
add wave -position end  sim:/processor/wb_sel_dec
add wave -position end  sim:/processor/wb_sel_ex
add wave -position end  sim:/processor/wb_sel_mem
add wave -position end  sim:/processor/write_address_to_mem
add wave -position end  sim:/processor/write_back_data
add wave -position end  sim:/processor/clk
add wave -position end  sim:/processor/clear_instruction_dec
add wave -position end  sim:/processor/decode_stage_dut/control_unit/current_state
add wave -position end  sim:/processor/decode_stage_dut/control_unit/instruction
add wave -position end  sim:/processor/decode_stage_dut/control_unit/reg_write
add wave -position end  sim:/processor/decode_stage_dut/reg_file_dut/reg_file
add wave -position 2  sim:/processor/fetch_stage_dut/instruction
add wave -position 0  sim:/processor/decode_stage_dut/control_unit/reg_write
do processor.do
# Causality operation skipped due to absence of debug database file
run
run
run
run
run
add wave -position 3  sim:/processor/fetch_stage_dut/mem_fetch_dut/pc
add wave -position end  sim:/processor/execute_stage_dut/flag_register
restart
# ** Note: (vsim-12125) Error and warning message counts have been reset to '0' because of 'restart'.
# ** Note: (vsim-8009) Loading existing optimized design _opt
# Loading work.processor(fast)
# Loading work.fetch_stage(fast)
# Loading work.var_reg_with_enable(fast)
# Loading work.var_reg_with_enable(fast__1)
# Loading work.mem_fetch(fast)
# Loading work.decode_stage(fast)
# Loading work.var_reg(fast)
# Loading work.var_reg(fast__1)
# Loading work.var_reg_with_mux(fast)
# Loading work.var_reg(fast__2)
# Loading work.var_reg_with_mux(fast__1)
# Loading work.var_reg_with_mux(fast__2)
# Loading work.var_reg_with_mux(fast__3)
# Loading work.var_reg_with_mux(fast__4)
# Loading work.sm(fast)
# Loading work.reg_file(fast)
# Loading work.execute_stage(fast)
# Loading work.forwarding_unit(fast)
# Loading work.branch_controller(fast)
# Loading work.var_reg_flags(fast)
# Loading work.var_reg(fast__3)
# Loading work.var_reg(fast__4)
# Loading work.var_reg(fast__5)
# Loading work.var_reg(fast__6)
# Loading work.var_reg(fast__7)
# Loading work.alu(fast)
# Loading work.memory_stage(fast)
# Loading work.memory_stage_without_buffers(fast)
# Loading work.write_back_stage(fast)
# Loading work.hazard_controller(fast)
do processor_two_operands.do
# Cannot open macro file: processor_two_operands.do
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "D:/arch_project/RISC-pipelined-processor/assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "D:/arch_project/RISC-pipelined-processor/assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i D:/arch_project/RISC-pipelined-processor/assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "./assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "./assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i ./assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do ../processor_two_operands.do
# ** UI-Msg: (vsim-7) Failed to open mem file "../assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
# Error in macro ./../processor_two_operands.do line 2
# ** UI-Msg: (vsim-7) Failed to open mem file "../assembler/output.mem" in read mode.
# No such file or directory. (errno = ENOENT)
#     while executing
# "mem load -i ../assembler/output.mem /processor/fetch_stage_dut/mem_fetch_dut/instruction_memory"
do processor_two_operands.do
# ** UI-Msg: (vsim-168) The time value, 50 ps, is smaller than the simulator resolution so no run occurred.
# Error in macro ./processor_two_operands.do line 7
# ** UI-Msg: (vsim-168) The time value, 50 ps, is smaller than the simulator resolution so no run occurred.
#     while executing
# "force -freeze sim:/processor/clk 1 0, 0 {50 ps} -r 100"
do processor_two_operands.do
run
run
run
run
run
run
run
run
run
run
restart
# ** Note: (vsim-8009) Loading existing optimized design _opt
# Loading work.processor(fast)
# Loading work.fetch_stage(fast)
# Loading work.var_reg_with_enable(fast)
# Loading work.var_reg_with_enable(fast__1)
# Loading work.mem_fetch(fast)
# Loading work.decode_stage(fast)
# Loading work.var_reg(fast)
# Loading work.var_reg(fast__1)
# Loading work.var_reg_with_mux(fast)
# Loading work.var_reg(fast__2)
# Loading work.var_reg_with_mux(fast__1)
# Loading work.var_reg_with_mux(fast__2)
# Loading work.var_reg_with_mux(fast__3)
# Loading work.var_reg_with_mux(fast__4)
# Loading work.sm(fast)
# Loading work.reg_file(fast)
# Loading work.execute_stage(fast)
# Loading work.forwarding_unit(fast)
# Loading work.branch_controller(fast)
# Loading work.var_reg_flags(fast)
# Loading work.var_reg(fast__3)
# Loading work.var_reg(fast__4)
# Loading work.var_reg(fast__5)
# Loading work.var_reg(fast__6)
# Loading work.var_reg(fast__7)
# Loading work.alu(fast)
# Loading work.memory_stage(fast)
# Loading work.memory_stage_without_buffers(fast)
# Loading work.write_back_stage(fast)
# Loading work.hazard_controller(fast)
do processor_two_operands.do
run
run
run
run
run
run
run
run
run
run
